<?php
// $Id$

function acdx_node_reference_field_widget_info() {
  return array(
    'node_reference_autocomplete_deluxe' => array(
      'label'       => t('Autocomplete Deluxe with new Node Create'),
      'description' => t('Display the list of referenceable nodes as a textfield with autocomplete deluxe behaviour.'),
      'field types' => array('node_reference'),
      'settings'    => array(
        'autocomplete_match' => 'contains',
        'size' => 60,
        'autocomplete_deluxe_path' => 'node_reference/autocomplete',
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function acdx_node_reference_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  switch ($instance['widget']['type']) {
    case 'node_reference_autocomplete_deluxe':
      // Since the value callback doesn't work with autocomplete deluxe, we need
      // to set the default value here.
      $value = NULL;
      if (isset($items[$delta]['nid'])) {
        $element['#default_value'] = $items[$delta]['nid'];
        $value = node_reference_autocomplete_value($element, FALSE, $form_state);
      }

      $acdx = array(
        '#type' => 'autocomplete_deluxe',
        '#default_value' => $value,
        '#autocomplete_deluxe_path' => url($instance['widget']['settings']['autocomplete_deluxe_path'] . '/' . $instance['entity_type'] . '/' . $instance['bundle'] . '/' . $field['field_name'], array('absolute' => TRUE)),
        '#size' => $instance['widget']['settings']['size'],
        '#element_validate' => array('acdx_node_reference_autocomplete_validate'),
        //TODO: does not work.
        '#value_callback' => 'node_reference_autocomplete_value',
      );
      // Element has already some fields and if we use += values that are
      // already in $element, won't be overwritten.
      $element = array_merge($element, $acdx);
      break;
  }
  return array('nid' => $element);
}

/**
 * Validation callback for a acdx_node_reference autocomplete element.
 *
 * This is mostly a copy of node_reference validate function,
 * and we just create new node in case no node with provided title exists.
 */
function acdx_node_reference_autocomplete_validate($element, &$form_state, $form) {
  $field = $form_state['field'][$element['#field_name']][$element['#language']]['field'];
  $instance = $form_state['field'][$element['#field_name']][$element['#language']]['instance'];

  $value = $element['#value'];
  $nid = NULL;

  if (strlen(trim($value)) > 0) {
    // Check whether we have an explicit "[nid:n]" input.
    preg_match('/^(?:\s*|(.*) )?\[\s*nid\s*:\s*(\d+)\s*\]$/', $value, $matches);
    if (!empty($matches)) {
      // Explicit nid. Check that the 'title' part matches the actual title for
      // the nid.
      list(, $title, $nid) = $matches;
      if (!empty($title)) {
        $real_title = db_select('node', 'n')
          ->fields('n', array('title'))
          ->condition('n.nid', $nid)
          ->execute()
          ->fetchField();
        if (trim($title) != trim($real_title)) {
          form_error($element, t('%name: title mismatch. Please check your selection.', array('%name' => $instance['label'])));
        }
      }
    }
    else {
      // No explicit nid (the submitted value was not populated by autocomplete
      // selection). Get the nid of a referencable node from the entered title.
      $options = array(
        'string' => $value,
        'match' => 'equals',
        'ids' => NULL,
        'limit' => 1,
      );
      $reference = node_reference_potential_references($field, $options);
      if ($reference) {
        // @todo The best thing would be to present the user with an
        // additional form, allowing the user to choose between valid
        // candidates with the same title. ATM, we pick the first
        // matching candidate...
        $nid = key($reference);
      }
      else {
        $newnode = NULL;
        if (is_array($field['settings']['referenceable_types'])) {
          foreach (array_filter($field['settings']['referenceable_types']) as $related_type) {
            $newnode->type = $related_type;
          }
        }
        global $user;
        $newnode->uid = $user->uid;
        $newnode->title = $value;
        $newnode->language = $element['#language'];
        if (module_exists('comment')) {
          $newnode->comment = variable_get("comment_$newnode->type", COMMENT_NODE_OPEN);
        }
        node_save($newnode);
        $nid = $newnode->nid;
      }
    }
  } else {
    if (strlen($value) > 0) {
      // if we got here then the user filled the name with spaces
      form_error($element, t('%name: title is empty. Please check your input.', array('%name' => $instance['label'])));
    }
  }


  // Set the element's value as the node id that was extracted from the entered
  // input.
  form_set_value($element, $nid, $form_state);
}
